import os
import logging
import random
from typing import Dict, List, Optional
from aiogram import Bot, Dispatcher, F, types
from aiogram.filters import Command
from aiogram.types import InlineKeyboardMarkup, InlineKeyboardButton, ReplyKeyboardMarkup, KeyboardButton
from aiogram.utils.keyboard import InlineKeyboardBuilder
from aiogram.enums import ParseMode
from aiogram.fsm.context import FSMContext
from aiogram.fsm.state import State, StatesGroup
from aiogram.fsm.storage.memory import MemoryStorage
from aiogram.client.default import DefaultBotProperties
import sqlite3
import string
from datetime import datetime
import math

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(level=logging.INFO, format='%(asctime)s - %(levelname)s - %(message)s')
logger = logging.getLogger(__name__)

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–æ—Ç–∞
bot = Bot(
    token="8121913607:AAHGPXwGqcJnufM2kyayIvyJA1plBjp192E",
    default=DefaultBotProperties(parse_mode=ParseMode.HTML)
)
dp = Dispatcher(storage=MemoryStorage())

# –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –±–æ—Ç–∞
CHANNEL_ID = "freewot_acc"  # Username –∫–∞–Ω–∞–ª–∞ –±–µ–∑ @
CHANNEL_URL = "https://t.me/freewot_acc"  # –ü—Ä—è–º–∞—è —Å—Å—ã–ª–∫–∞ –Ω–∞ –∫–∞–Ω–∞–ª
ADMIN_IDS = [7019824443,929704825]  # ID –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–≤
CAPTCHA_LENGTH = 5
FREE_ACCOUNT_CATEGORY = "–ë–µ—Å–ø–ª–∞—Ç–Ω—ã–µ"  # –ö–∞—Ç–µ–≥–æ—Ä–∏—è –¥–ª—è –±–µ—Å–ø–ª–∞—Ç–Ω—ã—Ö –∞–∫–∫–∞—É–Ω—Ç–æ–≤
INDENT = "                "  # 16 –ø—Ä–æ–±–µ–ª–æ–≤ –¥–ª—è –∫—Ä–∞—Å–Ω–æ–π —Å—Ç—Ä–æ–∫–∏
PRODUCTS_PER_PAGE = 5  # –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ —Ç–æ–≤–∞—Ä–æ–≤ –Ω–∞ –æ–¥–Ω–æ–π —Å—Ç—Ä–∞–Ω–∏—Ü–µ

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
try:
    conn = sqlite3.connect('accounts_bot.db', check_same_thread=False)
    cursor = conn.cursor()
    logger.info("Successfully connected to database")
except Exception as e:
    logger.error(f"Failed to connect to database: {e}")
    raise

# –ü—Ä–æ–≤–µ—Ä–∫–∞ –∏ –º–∏–≥—Ä–∞—Ü–∏—è —Ç–∞–±–ª–∏—Ü—ã accounts
cursor.execute("PRAGMA table_info(accounts)")
columns = [col[1] for col in cursor.fetchall()]
if 'description' not in columns or 'price' not in columns:
    logger.info("Migrating accounts table to include description and price columns")
    cursor.execute('''
    CREATE TABLE accounts_new (
        id INTEGER PRIMARY KEY AUTOINCREMENT,
        category TEXT,
        login TEXT,
        password TEXT,
        level TEXT,
        claimed_by INTEGER DEFAULT NULL,
        claim_date TEXT DEFAULT NULL,
        price INTEGER,
        description TEXT
    )
    ''')
    cursor.execute('''
    INSERT INTO accounts_new (id, category, login, password, level, claimed_by, claim_date)
    SELECT id, category, login, password, level, claimed_by, claim_date FROM accounts
    ''')
    cursor.execute('DROP TABLE accounts')
    cursor.execute('ALTER TABLE accounts_new RENAME TO accounts')
    conn.commit()
    logger.info("Accounts table migration completed")

# –ü—Ä–æ–≤–µ—Ä–∫–∞ –∏ –º–∏–≥—Ä–∞—Ü–∏—è —Ç–∞–±–ª–∏—Ü—ã user_accounts
cursor.execute("PRAGMA table_info(user_accounts)")
columns = [col[1] for col in cursor.fetchall()]
if 'description' not in columns:
    logger.info("Migrating user_accounts table to include description column")
    cursor.execute('''
    CREATE TABLE user_accounts_new (
        id INTEGER PRIMARY KEY AUTOINCREMENT,
        user_id INTEGER,
        account_id INTEGER,
        category TEXT,
        login TEXT,
        password TEXT,
        level TEXT,
        description TEXT,
        claim_date TEXT
    )
    ''')
    cursor.execute('''
    INSERT INTO user_accounts_new (id, user_id, account_id, category, login, password, level, claim_date)
    SELECT id, user_id, account_id, category, login, password, level, claim_date FROM user_accounts
    ''')
    cursor.execute('DROP TABLE user_accounts')
    cursor.execute('ALTER TABLE user_accounts_new RENAME TO user_accounts')
    conn.commit()
    logger.info("User_accounts table migration completed")

# –°–æ–∑–¥–∞–Ω–∏–µ –æ—Å—Ç–∞–ª—å–Ω—ã—Ö —Ç–∞–±–ª–∏—Ü (–µ—Å–ª–∏ –æ–Ω–∏ –µ—â–µ –Ω–µ —Å—É—â–µ—Å—Ç–≤—É—é—Ç)
cursor.execute('''
CREATE TABLE IF NOT EXISTS users (
    user_id INTEGER PRIMARY KEY,
    username TEXT,
    full_name TEXT,
    referral_id TEXT,
    referred_by TEXT,
    balance INTEGER DEFAULT 0,
    free_account_claimed INTEGER DEFAULT 0,
    referrals_count INTEGER DEFAULT 0,
    is_subscribed INTEGER DEFAULT 0,
    captcha_passed INTEGER DEFAULT 0,
    join_date TEXT
)
''')

cursor.execute('''
CREATE TABLE IF NOT EXISTS categories (
    name TEXT PRIMARY KEY,
    display_name TEXT
)
''')

try:
    cursor.execute("INSERT OR IGNORE INTO categories (name, display_name) VALUES (?, ?)",
                   ("–ë–µ—Å–ø–ª–∞—Ç–Ω—ã–µ", "–ë–µ—Å–ø–ª–∞—Ç–Ω—ã–µ"))
    cursor.execute("INSERT OR IGNORE INTO categories (name, display_name) VALUES (?, ?)",
                   ("–ú–∏—Ä —Ç–∞–Ω–∫–æ–≤", "–ú–∏—Ä —Ç–∞–Ω–∫–æ–≤"))
    cursor.execute("INSERT OR IGNORE INTO categories (name, display_name) VALUES (?, ?)",
                   ("–ë–ª–∏—Ü", "–ë–ª–∏—Ü"))
    conn.commit()
    logger.info("Categories initialized successfully")
except Exception as e:
    logger.error(f"Failed to initialize categories: {e}")

# –°–æ—Å—Ç–æ—è–Ω–∏—è FSM
class AdminStates(StatesGroup):
    waiting_for_category = State()
    waiting_for_new_product_category = State()
    waiting_for_new_product_level = State()
    waiting_for_new_product_price = State()
    waiting_for_new_product_description = State()
    waiting_for_new_product_accounts = State()
    waiting_for_replenish_product = State()
    waiting_for_replenish_accounts = State()
    waiting_for_broadcast = State()
    waiting_for_add_coins = State()
    waiting_for_delete_product = State()

class UserStates(StatesGroup):
    captcha = State()
    selecting_product = State()
    viewing_accounts = State()

# –ì–µ–Ω–µ—Ä–∞—Ü–∏—è —Å–ª—É—á–∞–π–Ω–æ–π –∫–∞–ø—á–∏
def generate_captcha(length=CAPTCHA_LENGTH):
    return ''.join(random.choices(string.ascii_letters + string.digits, k=length))

# –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–æ–¥–ø–∏—Å–∫–∏ –Ω–∞ –∫–∞–Ω–∞–ª
async def check_subscription(user_id: int) -> bool:
    try:
        member = await bot.get_chat_member(chat_id=f"@{CHANNEL_ID}", user_id=user_id)
        return member.status in ['member', 'administrator', 'creator']
    except Exception as e:
        logger.error(f"Error checking subscription for user {user_id}: {e}")
        return False

# –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é
def main_menu_keyboard() -> ReplyKeyboardMarkup:
    keyboard = ReplyKeyboardMarkup(
        keyboard=[
            [KeyboardButton(text="üì¶ –ü–æ–ª—É—á–∏—Ç—å –∞–∫–∫–∞—É–Ω—Ç")],
            [KeyboardButton(text="üë§ –ü—Ä–æ—Ñ–∏–ª—å"), KeyboardButton(text="üì¶ –ú–æ–∏ –∞–∫–∫–∞—É–Ω—Ç—ã")],
            [KeyboardButton(text="üí∞ –ó–∞—Ä–∞–±–æ—Ç–∞—Ç—å —Å–ª–∏—Ç–∫–∏")]
        ],
        resize_keyboard=True
    )
    return keyboard

def admin_keyboard() -> InlineKeyboardMarkup:
    builder = InlineKeyboardBuilder()
    builder.add(
        InlineKeyboardButton(text="üì§ –ó–∞–≥—Ä—É–∑–∏—Ç—å –Ω–æ–≤—ã–π —Ç–æ–≤–∞—Ä", callback_data="upload_product"),
        InlineKeyboardButton(text="üîÑ –ü–æ–ø–æ–ª–Ω–∏—Ç—å —Ç–æ–≤–∞—Ä", callback_data="replenish_product"),
        InlineKeyboardButton(text="üóëÔ∏è –£–¥–∞–ª–∏—Ç—å —Ç–æ–≤–∞—Ä—ã", callback_data="delete_products"),
        InlineKeyboardButton(text="üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞", callback_data="stats"),
        InlineKeyboardButton(text="üìã –ü—Ä–æ—Å–º–æ—Ç—Ä —Ç–æ–≤–∞—Ä–æ–≤", callback_data="view_products"),
        InlineKeyboardButton(text="üì¢ –°–¥–µ–ª–∞—Ç—å —Ä–∞—Å—Å—ã–ª–∫—É", callback_data="broadcast"),
        InlineKeyboardButton(text="üí∞ –ù–∞—á–∏—Å–ª–∏—Ç—å —Å–ª–∏—Ç–∫–∏", callback_data="add_coins"),
        InlineKeyboardButton(text="üìù –ö–∞—Ç–µ–≥–æ—Ä–∏–∏", callback_data="categories"),
    )
    builder.adjust(2)
    return builder.as_markup()


@dp.message(Command("start"))
async def cmd_start(message: types.Message, state: FSMContext):
    user_id = message.from_user.id
    args = message.text.split()
    referral_id = args[1] if len(args) > 1 else None

    cursor.execute("SELECT * FROM users WHERE user_id = ?", (user_id,))
    user = cursor.fetchone()

    if not user:
        username = message.from_user.username
        full_name = message.from_user.full_name
        join_date = datetime.now().strftime("%Y-%m-%d %H:%M:%S")

        referred_by = None
        if referral_id:
            cursor.execute("SELECT user_id, referrals_count FROM users WHERE referral_id = ?", (referral_id,))
            referrer = cursor.fetchone()
            if referrer:
                referred_by, referrals_count = referrer
                cursor.execute(
                    "UPDATE users SET balance = balance + 1, referrals_count = referrals_count + 1 WHERE user_id = ?",
                    (referred_by,)
                )
                # –£–≤–µ–¥–æ–º–ª—è–µ–º —Ä–µ—Ñ–µ—Ä–µ—Ä–∞ –æ –Ω–æ–≤–æ–º —Ä–µ—Ñ–µ—Ä–∞–ª–µ
                try:
                    await bot.send_message(
                        referred_by,
                        f"{INDENT}–£ –≤–∞—Å –Ω–æ–≤—ã–π —Ä–µ—Ñ–µ—Ä–∞–ª! +1 —Å–ª–∏—Ç–æ–∫ üéâ\n"
                        f"{INDENT}–¢–µ–ø–µ—Ä—å —É –≤–∞—Å <b>{referrals_count + 1}</b> —Ä–µ—Ñ–µ—Ä–∞–ª–æ–≤."
                    )
                    logger.info(f"Sent referral notification to user {referred_by}")
                except Exception as e:
                    logger.error(f"Failed to send referral notification to user {referred_by}: {e}")

        ref_id = ''.join(random.choices(string.ascii_letters + string.digits, k=8))
        cursor.execute(
            "INSERT INTO users (user_id, username, full_name, referral_id, referred_by, join_date) VALUES (?, ?, ?, ?, ?, ?)",
            (user_id, username, full_name, ref_id, referred_by, join_date)
        )
        conn.commit()

        captcha = generate_captcha()
        await state.update_data(captcha=captcha)
        await state.set_state(UserStates.captcha)
        await message.answer(f"{INDENT}–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ —Å–ª–µ–¥—É—é—â–∏–π –∫–æ–¥ –¥–ª—è –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è: <b>{captcha}</b>")
    else:
        is_subscribed = await check_subscription(user_id)
        if is_subscribed:
            cursor.execute("UPDATE users SET is_subscribed = 1 WHERE user_id = ?", (user_id,))
            conn.commit()
            await show_welcome_message(message)
        else:
            await message.answer(f"{INDENT}–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–¥–ø–∏—à–∏—Ç–µ—Å—å –Ω–∞ –Ω–∞—à –∫–∞–Ω–∞–ª, —á—Ç–æ–±—ã –ø—Ä–æ–¥–æ–ª–∂–∏—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç—å—Å—è –±–æ—Ç–æ–º.")
            await prompt_subscription(message)

# –ü–æ–∫–∞–∑–∞—Ç—å –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
async def show_welcome_message(message: types.Message):
    user_id = message.from_user.id
    cursor.execute("SELECT full_name FROM users WHERE user_id = ?", (user_id,))
    user = cursor.fetchone()

    welcome_text = (
        f"{INDENT}–ü—Ä–∏–≤–µ—Ç, <b>{user[0]}</b> üëã\n"
        f"{INDENT}–í —ç—Ç–æ–º –±–æ—Ç–µ —Ç—ã –º–æ–∂–µ—à—å –ø–æ–ª—É—á–∏—Ç—å –±–µ—Å–ø–ª–∞—Ç–Ω—ã–µ –∞–∫–∫–∞—É–Ω—Ç—ã, –ø—Ä–∏–≥–ª–∞—à–∞—è –¥—Ä—É–∑–µ–π —á–µ—Ä–µ–∑ —Ä–µ—Ñ–µ—Ä–∞–ª—å–Ω—É—é —Å—Å—ã–ª–∫—É "
        "–∏–ª–∏ –≤—ã–ø–æ–ª–Ω—è—è –∑–∞–¥–∞–Ω–∏—è üí∞"
    )
    await message.answer(welcome_text, reply_markup=main_menu_keyboard())

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –≤–≤–æ–¥–∞ –∫–∞–ø—á–∏
@dp.message(UserStates.captcha)
async def process_captcha(message: types.Message, state: FSMContext):
    user_data = await state.get_data()
    if message.text.upper() == user_data['captcha'].upper():
        await state.update_data(captcha_passed=True)
        await state.clear()

        is_subscribed = await check_subscription(message.from_user.id)
        if is_subscribed:
            cursor.execute("UPDATE users SET captcha_passed = 1, is_subscribed = 1 WHERE user_id = ?",
                           (message.from_user.id,))
            conn.commit()
            await show_welcome_message(message)
        else:
            await prompt_subscription(message)
    else:
        captcha = generate_captcha()
        await state.update_data(captcha=captcha)
        await message.answer(f"{INDENT}–î–ª—è –Ω–∞—á–∞–ª–∞ –≤–≤–µ–¥–∏—Ç–µ –∫–æ–¥. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑: <b>{captcha}</b>")

# –ó–∞–ø—Ä–æ—Å –ø–æ–¥–ø–∏—Å–∫–∏ –Ω–∞ –∫–∞–Ω–∞–ª
async def prompt_subscription(message: types.Message):
    keyboard = InlineKeyboardMarkup(inline_keyboard=[
        [InlineKeyboardButton(text="–ü–æ–¥–ø–∏—Å–∞—Ç—å—Å—è", url=CHANNEL_URL)],
        [InlineKeyboardButton(text="–Ø –ø–æ–¥–ø–∏—Å–∞–ª—Å—è", callback_data="check_subscription")]
    ])
    await message.answer(
        f"{INDENT}üì¢ –î–ª—è –ø—Ä–æ–¥–æ–ª–∂–µ–Ω–∏—è —Ä–∞–±–æ—Ç—ã —Å –±–æ—Ç–æ–º –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ –ø–æ–¥–ø–∏—Å–∞—Ç—å—Å—è –Ω–∞ –Ω–∞—à –∫–∞–Ω–∞–ª:",
        reply_markup=keyboard
    )

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –ø—Ä–æ–≤–µ—Ä–∫–∏ –ø–æ–¥–ø–∏—Å–∫–∏
@dp.callback_query(F.data == "check_subscription")
async def check_subscription_callback(callback: types.CallbackQuery):
    user_id = callback.from_user.id
    is_subscribed = await check_subscription(user_id)
    if is_subscribed:
        cursor.execute("UPDATE users SET is_subscribed = 1 WHERE user_id = ?", (user_id,))
        conn.commit()
        await callback.message.delete()
        # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –∏ –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É
        await show_welcome_message(callback.message)
    else:
        await callback.answer("–í—ã –Ω–µ –ø–æ–¥–ø–∏—Å–∞–Ω—ã –Ω–∞ –∫–∞–Ω–∞–ª. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–¥–ø–∏—à–∏—Ç–µ—Å—å –∏ –ø–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞.", show_alert=True)

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–Ω–æ–ø–∫–∏ "–ü–æ–ª—É—á–∏—Ç—å –∞–∫–∫–∞—É–Ω—Ç"
@dp.message(F.text == "üì¶ –ü–æ–ª—É—á–∏—Ç—å –∞–∫–∫–∞—É–Ω—Ç")
async def get_account(message: types.Message):
    user_id = message.from_user.id

    is_subscribed = await check_subscription(user_id)
    if not is_subscribed:
        await prompt_subscription(message)
        return

    cursor.execute("SELECT free_account_claimed FROM users WHERE user_id = ?", (user_id,))
    user = cursor.fetchone()

    if user and user[0] == 0:
        await handle_free_account(message)
    else:
        await show_paid_accounts_menu(message)

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –±–µ—Å–ø–ª–∞—Ç–Ω–æ–≥–æ –∞–∫–∫–∞—É–Ω—Ç–∞
async def handle_free_account(message: types.Message):
    user_id = message.from_user.id

    cursor.execute(
        "SELECT id, login, password FROM accounts WHERE category = ? AND claimed_by IS NULL LIMIT 1",
        (FREE_ACCOUNT_CATEGORY,)
    )
    account = cursor.fetchone()

    if account:
        account_id, login, password = account
        claim_date = datetime.now().strftime("%Y-%m-%d %H:%M:%S")

        try:
            cursor.execute(
                "INSERT INTO user_accounts (user_id, account_id, category, login, password, claim_date) VALUES (?, ?, ?, ?, ?, ?)",
                (user_id, account_id, FREE_ACCOUNT_CATEGORY, login, password, claim_date))
            cursor.execute("DELETE FROM accounts WHERE id = ?", (account_id,))
            cursor.execute("UPDATE users SET free_account_claimed = 1 WHERE user_id = ?", (user_id,))
            conn.commit()
            logger.info(f"Free account {account_id} claimed by user {user_id}")
        except Exception as e:
            logger.error(f"Error saving free account for user {user_id}: {e}")
            await message.answer(f"{INDENT}–û—à–∏–±–∫–∞ –ø—Ä–∏ –≤—ã–¥–∞—á–µ –∞–∫–∫–∞—É–Ω—Ç–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.")
            return

        account_text = (
            f"{INDENT}üîë –ë–µ—Å–ø–ª–∞—Ç–Ω—ã–π –∞–∫–∫–∞—É–Ω—Ç:\n\n"
            f"{INDENT}üë§ –õ–æ–≥–∏–Ω: <b>{login}</b>\n"
            f"{INDENT}üîí –ü–∞—Ä–æ–ª—å: <b>{password}</b>\n\n"
            f"{INDENT}–°–ø–∞—Å–∏–±–æ –∑–∞ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ –Ω–∞—à–µ–≥–æ –±–æ—Ç–∞!"
        )
        await message.answer(account_text)
    else:
        await message.answer(f"{INDENT}–ö —Å–æ–∂–∞–ª–µ–Ω–∏—é, –±–µ—Å–ø–ª–∞—Ç–Ω—ã–µ –∞–∫–∫–∞—É–Ω—Ç—ã –∑–∞–∫–æ–Ω—á–∏–ª–∏—Å—å. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.")

# –ü–æ–∫–∞–∑–∞—Ç—å –º–µ–Ω—é –ø–ª–∞—Ç–Ω—ã—Ö –∞–∫–∫–∞—É–Ω—Ç–æ–≤
async def show_paid_accounts_menu(message: types.Message):
    user_id = message.from_user.id

    cursor.execute("SELECT balance FROM users WHERE user_id = ?", (user_id,))
    balance = cursor.fetchone()[0]

    cursor.execute("SELECT name, display_name FROM categories WHERE name != ?", (FREE_ACCOUNT_CATEGORY,))
    categories = cursor.fetchall()

    if not categories:
        await message.answer(f"{INDENT}–í –Ω–∞—Å—Ç–æ—è—â–µ–µ –≤—Ä–µ–º—è –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –∫–∞—Ç–µ–≥–æ—Ä–∏–π —Ç–æ–≤–∞—Ä–æ–≤.")
        return

    text = f"{INDENT}üí∞ –£ –≤–∞—Å <b>{balance}</b> —Å–ª–∏—Ç–∫–æ–≤\n\n{INDENT}–í—ã–±–µ—Ä–∏—Ç–µ –∫–∞—Ç–µ–≥–æ—Ä–∏—é:"

    builder = InlineKeyboardBuilder()
    for category in categories:
        builder.add(InlineKeyboardButton(
            text=category[1],
            callback_data=f"category_{category[0]}"
        ))

    builder.adjust(1)
    await message.answer(text, reply_markup=builder.as_markup())

@dp.callback_query(F.data.startswith("category_"))
async def process_category_selection(callback: types.CallbackQuery, state: FSMContext):
    category = callback.data.split("_")[1]
    user_id = callback.from_user.id

    cursor.execute("SELECT balance FROM users WHERE user_id = ?", (user_id,))
    balance = cursor.fetchone()[0]
    cursor.execute("SELECT display_name FROM categories WHERE name = ?", (category,))
    display_name = cursor.fetchone()[0]

    # –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ —É–Ω–∏–∫–∞–ª—å–Ω—ã–µ —Ç–æ–≤–∞—Ä—ã –≤ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏, –∏–≥–Ω–æ—Ä–∏—Ä—É—è level
    cursor.execute(
        """
        SELECT TRIM(LOWER(description)) as description, COALESCE(price, 0) as price, NULL as level, COUNT(*) as count
        FROM accounts
        WHERE category = ? AND claimed_by IS NULL
        GROUP BY TRIM(LOWER(description)), price
        """,
        (category,)
    )
    products = cursor.fetchall()

    # –õ–æ–≥–∏—Ä—É–µ–º —Ç–æ–≤–∞—Ä—ã –¥–ª—è –æ—Ç–ª–∞–¥–∫–∏
    for product in products:
        description, price, level, count = product
        logger.info(f"Product in category {category}: description={description}, price={price}, level={level}, count={count}")

    text = f"{INDENT}üí∞ –£ –≤–∞—Å <b>{balance}</b> —Å–ª–∏—Ç–∫–æ–≤\n\n{INDENT}–í—ã–±–µ—Ä–∏—Ç–µ —Ç–æ–≤–∞—Ä –≤ <b>{display_name}</b>:"
    builder = InlineKeyboardBuilder()

    # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Å–ø–∏—Å–æ–∫ –ø—Ä–æ–¥—É–∫—Ç–æ–≤ –≤ —Å–æ—Å—Ç–æ—è–Ω–∏–∏ –¥–ª—è –ø–∞–≥–∏–Ω–∞—Ü–∏–∏
    product_list = []
    for product in products:
        description, price, level, count = product
        description = description if description else "–ë–µ–∑ –Ω–∞–∑–≤–∞–Ω–∏—è"
        level = level if level else "–ù–µ —É–∫–∞–∑–∞–Ω"
        product_list.append({
            "category": category,
            "description": description,
            "price": price,
            "level": level,
            "count": count
        })

    if not product_list:
        text = f"{INDENT}üí∞ –£ –≤–∞—Å <b>{balance}</b> —Å–ª–∏—Ç–∫–æ–≤\n\n{INDENT}–í –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ <b>{display_name}</b> –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–Ω—ã—Ö —Ç–æ–≤–∞—Ä–æ–≤."
        logger.warning(f"No available products found in category: {category}")
    else:
        await state.update_data(category=category, product_list=product_list, page=0)
        await state.set_state(UserStates.selecting_product)
        await show_products_page(callback.message, None, user_id, state)

    builder.add(InlineKeyboardButton(
        text="‚¨ÖÔ∏è –ù–∞–∑–∞–¥ –∫ –∫–∞—Ç–µ–≥–æ—Ä–∏—è–º",
        callback_data="back_to_categories"
    ))
    builder.adjust(1)

    await callback.message.edit_text(text, reply_markup=builder.as_markup())

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è —Å—Ç—Ä–∞–Ω–∏—Ü—ã —Ç–æ–≤–∞—Ä–æ–≤
async def show_products_page(message: types.Message, callback: types.CallbackQuery, user_id: int, state: FSMContext):
    state_data = await state.get_data()
    product_list = state_data.get("product_list", [])
    page = state_data.get("page", 0)
    category = state_data.get("category")
    cursor.execute("SELECT display_name FROM categories WHERE name = ?", (category,))
    display_name = cursor.fetchone()[0]
    cursor.execute("SELECT balance FROM users WHERE user_id = ?", (user_id,))
    balance_result = cursor.fetchone()

    if balance_result is None:
        logger.error(f"No user found with user_id {user_id}")
        text = f"{INDENT}–û—à–∏–±–∫–∞: –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–µ—Ä–µ–∑–∞–ø—É—Å—Ç–∏—Ç–µ –±–æ—Ç–∞ (/start)."
        if callback:
            await callback.message.edit_text(text)
        else:
            await message.answer(text)
        return

    balance = balance_result[0]

    total_products = len(product_list)
    total_pages = math.ceil(total_products / PRODUCTS_PER_PAGE)
    start_idx = page * PRODUCTS_PER_PAGE
    end_idx = min(start_idx + PRODUCTS_PER_PAGE, total_products)
    current_products = product_list[start_idx:end_idx]

    text = f"{INDENT}üí∞ –£ –≤–∞—Å <b>{balance}</b> —Å–ª–∏—Ç–∫–æ–≤\n\n{INDENT}–í—ã–±–µ—Ä–∏—Ç–µ —Ç–æ–≤–∞—Ä –≤ <b>{display_name}</b> (–°—Ç—Ä–∞–Ω–∏—Ü–∞ {page + 1}/{total_pages}):\n\n"
    builder = InlineKeyboardBuilder()

    for idx, product in enumerate(current_products, start=start_idx + 1):
        description, price, level, count = product["description"], product["price"], product["level"], product["count"]
        builder.add(InlineKeyboardButton(
            text=f"{description} - {price} —Å–ª–∏—Ç–∫–æ–≤ (–≤ –Ω–∞–ª–∏—á–∏–∏: {count})",
            callback_data=f"buy_product_{idx - 1}"
        ))

    # –ö–Ω–æ–ø–∫–∏ –Ω–∞–≤–∏–≥–∞—Ü–∏–∏
    if page > 0:
        builder.add(InlineKeyboardButton(text="‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data=f"product_page_{page - 1}"))
    if page < total_pages - 1:
        builder.add(InlineKeyboardButton(text="–í–ø–µ—Ä—ë–¥ ‚û°Ô∏è", callback_data=f"product_page_{page + 1}"))

    builder.adjust(1)
    if callback:
        await callback.message.edit_text(text, reply_markup=builder.as_markup())
    else:
        await message.answer(text, reply_markup=builder.as_markup())

@dp.callback_query(F.data.startswith("product_page_"))
async def process_product_page(callback: types.CallbackQuery, state: FSMContext):
    page = int(callback.data.split("_")[2])
    user_id = callback.from_user.id
    await state.update_data(page=page)
    await show_products_page(None, callback, user_id, state)

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –ø–æ–∫—É–ø–∫–∏ —Ç–æ–≤–∞—Ä–∞
@dp.callback_query(F.data.startswith("buy_product_"))
async def process_account_purchase(callback: types.CallbackQuery, state: FSMContext):
    index = int(callback.data.split("_")[2])
    user_id = callback.from_user.id

    state_data = await state.get_data()
    product_list = state_data.get("product_list", [])
    category = state_data.get("category")

    if index < 0 or index >= len(product_list):
        await callback.answer("–û—à–∏–±–∫–∞: —Ç–æ–≤–∞—Ä –Ω–µ –Ω–∞–π–¥–µ–Ω.", show_alert=True)
        return

    product = product_list[index]
    description = product["description"]
    price = product["price"]

    cursor.execute("SELECT balance FROM users WHERE user_id = ?", (user_id,))
    balance = cursor.fetchone()[0]

    if balance < price:
        await callback.answer("–ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ —Å–ª–∏—Ç–∫–æ–≤ –¥–ª—è –ø–æ–∫—É–ø–∫–∏! –ó–∞—Ä–∞–±–æ—Ç–∞–π—Ç–µ —Å–ª–∏—Ç–∫–∏, –ø—Ä–∏–≥–ª–∞—à–∞—è –¥—Ä—É–∑–µ–π.",
                              show_alert=True)
        return

    cursor.execute(
        """
        SELECT COUNT(*)
        FROM accounts
        WHERE category = ?
        AND TRIM(LOWER(description)) = TRIM(LOWER(?))
        AND claimed_by IS NULL
        """,
        (category, description if description != "–ë–µ–∑ –Ω–∞–∑–≤–∞–Ω–∏—è" else None)
    )
    available_accounts = cursor.fetchone()[0]
    logger.info(f"Available accounts for purchase in category {category}, description {description}: {available_accounts}")

    if available_accounts == 0:
        await callback.answer("–ö —Å–æ–∂–∞–ª–µ–Ω–∏—é, —Ç–æ–≤–∞—Ä—ã –≤ —ç—Ç–æ–π –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ –∑–∞–∫–æ–Ω—á–∏–ª–∏—Å—å.", show_alert=True)
        return

    try:
        cursor.execute(
            """
            SELECT id, login, password, level
            FROM accounts
            WHERE category = ?
            AND TRIM(LOWER(description)) = TRIM(LOWER(?))
            AND claimed_by IS NULL
            ORDER BY RANDOM()
            LIMIT 1
            """,
            (category, description if description != "–ë–µ–∑ –Ω–∞–∑–≤–∞–Ω–∏—è" else None)
        )
        account = cursor.fetchone()

        if account:
            account_id, login, password, account_level = account
            claim_date = datetime.now().strftime("%Y-%m-%d %H:%M:%S")

            try:
                cursor.execute("UPDATE users SET balance = balance - ? WHERE user_id = ?", (price, user_id))
                cursor.execute(
                    "INSERT INTO user_accounts (user_id, account_id, category, login, password, level, description, claim_date) VALUES (?, ?, ?, ?, ?, ?, ?, ?)",
                    (user_id, account_id, category, login, password, account_level or "", description, claim_date))
                cursor.execute("DELETE FROM accounts WHERE id = ?", (account_id,))
                conn.commit()
                logger.info(f"Account {account_id} purchased by user {user_id} for {price} coins")
            except Exception as e:
                logger.error(f"Error processing purchase for user {user_id}, account {account_id}: {e}")
                conn.rollback()
                await callback.answer("–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–∫—É–ø–∫–µ —Ç–æ–≤–∞—Ä–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.", show_alert=True)
                return

            account_text = (
                f"{INDENT}üîë –ö—É–ø–ª–µ–Ω–Ω—ã–π —Ç–æ–≤–∞—Ä (<b>{price}</b> —Å–ª–∏—Ç–∫–æ–≤):\n\n"
                f"{INDENT}üìú –û–ø–∏—Å–∞–Ω–∏–µ: <b>{description}</b>\n"
                f"{INDENT}üë§ –õ–æ–≥–∏–Ω: <b>{login}</b>\n"
                f"{INDENT}üîí –ü–∞—Ä–æ–ª—å: <b>{password}</b>\n"
                f"{INDENT}üìä –£—Ä–æ–≤–µ–Ω—å: {account_level or '–ù–µ —É–∫–∞–∑–∞–Ω'}\n\n"
                f"{INDENT}–°–ø–∞—Å–∏–±–æ –∑–∞ –ø–æ–∫—É–ø–∫—É!"
            )
            await callback.message.answer(account_text)
            await callback.message.delete()
        else:
            logger.warning(f"No account found for category {category}, description {description}")
            await callback.answer(
                f"–ö —Å–æ–∂–∞–ª–µ–Ω–∏—é, —Ç–æ–≤–∞—Ä—ã '{description}' –∑–∞–∫–æ–Ω—á–∏–ª–∏—Å—å. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –¥—Ä—É–≥–æ–π –≤–∞—Ä–∏–∞–Ω—Ç –∏–ª–∏ –æ–±—Ä–∞—Ç–∏—Ç–µ—Å—å –∫ –∞–¥–º–∏–Ω—É.",
                show_alert=True
            )
    except Exception as e:
        logger.error(f"Error querying account for purchase in category {category}, description {description}: {e}")
        await callback.answer("–û—à–∏–±–∫–∞ –ø—Ä–∏ –≤—ã–±–æ—Ä–µ —Ç–æ–≤–∞—Ä–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.", show_alert=True)

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –≤–æ–∑–≤—Ä–∞—Ç–∞ –∫ –∫–∞—Ç–µ–≥–æ—Ä–∏—è–º
@dp.callback_query(F.data == "back_to_categories")
async def back_to_categories(callback: types.CallbackQuery, state: FSMContext):
    await state.clear()
    user_id = callback.from_user.id

    cursor.execute("SELECT balance FROM users WHERE user_id = ?", (user_id,))
    balance = cursor.fetchone()[0]

    cursor.execute("SELECT name, display_name FROM categories WHERE name != ?", (FREE_ACCOUNT_CATEGORY,))
    categories = cursor.fetchall()

    if not categories:
        await callback.message.edit_text(f"{INDENT}–í –Ω–∞—Å—Ç–æ—è—â–µ–µ –≤—Ä–µ–º—è –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –∫–∞—Ç–µ–≥–æ—Ä–∏–π —Ç–æ–≤–∞—Ä–æ–≤.")
        return

    text = f"{INDENT}üí∞ –£ –≤–∞—Å <b>{balance}</b> —Å–ª–∏—Ç–∫–æ–≤\n\n{INDENT}–í—ã–±–µ—Ä–∏—Ç–µ –∫–∞—Ç–µ–≥–æ—Ä–∏—é:"

    builder = InlineKeyboardBuilder()
    for category in categories:
        builder.add(InlineKeyboardButton(
            text=category[1],
            callback_data=f"category_{category[0]}"
        ))

    builder.adjust(1)
    await callback.message.edit_text(text, reply_markup=builder.as_markup())

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–Ω–æ–ø–∫–∏ "–ü—Ä–æ—Ñ–∏–ª—å"
@dp.message(F.text == "üë§ –ü—Ä–æ—Ñ–∏–ª—å")
async def show_profile(message: types.Message):
    user_id = message.from_user.id

    try:
        cursor.execute(
            "SELECT full_name, balance, referrals_count, referral_id FROM users WHERE user_id = ?",
            (user_id,))
        user = cursor.fetchone()

        if user:
            full_name, balance, referrals_count, referral_id = user
            profile_text = (
                f"{INDENT}üë§ –í–∞—à –ø—Ä–æ—Ñ–∏–ª—å:\n\n"
                f"{INDENT}üí∞ –£ –≤–∞—Å <b>{balance}</b> —Å–ª–∏—Ç–∫–æ–≤\n"
                f"{INDENT}üìà –í—ã –ø—Ä–∏–≥–ª–∞—Å–∏–ª–∏: <b>{referrals_count}</b> –¥—Ä—É–∑–µ–π\n"
                f"{INDENT}üîó –í–∞—à–∞ —Ä–µ—Ñ–µ—Ä–∞–ª—å–Ω–∞—è —Å—Å—ã–ª–∫–∞:\n"
                f"{INDENT}https://t.me/{(await bot.get_me()).username}?start={referral_id}"
            )
            await message.answer(profile_text)
        else:
            await message.answer(f"{INDENT}–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–µ—Ä–µ–∑–∞–ø—É—Å—Ç–∏—Ç—å –±–æ—Ç–∞ (/start).")
    except Exception as e:
        logger.error(f"Error fetching profile for user {user_id}: {e}")
        await message.answer(f"{INDENT}–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ –ø—Ä–æ—Ñ–∏–ª—è. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.")

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è —Å—Ç—Ä–∞–Ω–∏—Ü—ã –∞–∫–∫–∞—É–Ω—Ç–æ–≤
async def show_accounts_page(message: types.Message, callback: types.CallbackQuery, accounts: List, page: int, state: FSMContext):
    total_accounts = len(accounts)
    total_pages = math.ceil(total_accounts / PRODUCTS_PER_PAGE)
    start_idx = page * PRODUCTS_PER_PAGE
    end_idx = min(start_idx + PRODUCTS_PER_PAGE, total_accounts)
    current_accounts = accounts[start_idx:end_idx]

    text = f"{INDENT}üì¶ –í–∞—à–∏ —Ç–æ–≤–∞—Ä—ã (–°—Ç—Ä–∞–Ω–∏—Ü–∞ {page + 1}/{total_pages}):\n\n"
    for idx, account in enumerate(current_accounts, start=start_idx + 1):
        category, login, password, level, description, claim_date = account
        description = description if description is not None else "–ë–µ–∑ –Ω–∞–∑–≤–∞–Ω–∏—è"
        text += (
            f"{INDENT}{idx}. {category or '–ù–µ —É–∫–∞–∑–∞–Ω–∞'}\n"
            f"{INDENT}üìú –û–ø–∏—Å–∞–Ω–∏–µ: <b>{description}</b>\n"
            f"{INDENT}üë§ –õ–æ–≥–∏–Ω: <b>{login}</b>\n"
            f"{INDENT}üîí –ü–∞—Ä–æ–ª—å: <b>{password}</b>\n"
            f"{INDENT}üìä –£—Ä–æ–≤–µ–Ω—å: {level or '–ù–µ —É–∫–∞–∑–∞–Ω'}\n"
            f"{INDENT}üìÖ –ü–æ–ª—É—á–µ–Ω: {claim_date[:10]}\n\n"
        )

    # –°–æ–∑–¥–∞—ë–º –∫–Ω–æ–ø–∫–∏ –Ω–∞–≤–∏–≥–∞—Ü–∏–∏
    builder = InlineKeyboardBuilder()
    if page > 0:
        builder.add(InlineKeyboardButton(text="‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data=f"accounts_page_{page - 1}"))
    if page < total_pages - 1:
        builder.add(InlineKeyboardButton(text="–í–ø–µ—Ä—ë–¥ ‚û°Ô∏è", callback_data=f"accounts_page_{page + 1}"))
    builder.adjust(2)

    if callback:
        await callback.message.edit_text(text, reply_markup=builder.as_markup())
    else:
        await message.answer(text, reply_markup=builder.as_markup())

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–Ω–æ–ø–∫–∏ "–ú–æ–∏ –∞–∫–∫–∞—É–Ω—Ç—ã"
@dp.message(F.text == "üì¶ –ú–æ–∏ –∞–∫–∫–∞—É–Ω—Ç—ã")
async def show_my_accounts(message: types.Message, state: FSMContext):
    user_id = message.from_user.id

    try:
        cursor.execute('''
            SELECT category, login, password, level, description, claim_date 
            FROM user_accounts
            WHERE user_id = ?
            ORDER BY claim_date DESC
        ''', (user_id,))
        accounts = cursor.fetchall()

        if not accounts:
            await message.answer(f"{INDENT}–£ –≤–∞—Å –ø–æ–∫–∞ –Ω–µ—Ç –∫—É–ø–ª–µ–Ω–Ω—ã—Ö —Ç–æ–≤–∞—Ä–æ–≤.")
            return

        # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Å–ø–∏—Å–æ–∫ –∞–∫–∫–∞—É–Ω—Ç–æ–≤ –≤ —Å–æ—Å—Ç–æ—è–Ω–∏–∏
        await state.update_data(accounts=accounts, page=0)
        await state.set_state(UserStates.viewing_accounts)

        # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø–µ—Ä–≤—É—é —Å—Ç—Ä–∞–Ω–∏—Ü—É
        await show_accounts_page(message, None, accounts, 0, state)

    except Exception as e:
        logger.error(f"Error fetching accounts for user {user_id}: {e}")
        await message.answer(f"{INDENT}–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ —Ç–æ–≤–∞—Ä–æ–≤. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.")

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –ø–µ—Ä–µ–ª–∏—Å—Ç—ã–≤–∞–Ω–∏—è —Å—Ç—Ä–∞–Ω–∏—Ü –∞–∫–∫–∞—É–Ω—Ç–æ–≤
@dp.callback_query(F.data.startswith("accounts_page_"))
async def process_accounts_page(callback: types.CallbackQuery, state: FSMContext):
    page = int(callback.data.split("_")[2])
    state_data = await state.get_data()
    accounts = state_data.get("accounts", [])

    if not accounts:
        await callback.message.edit_text(f"{INDENT}–û—à–∏–±–∫–∞: –¥–∞–Ω–Ω—ã–µ –æ —Ç–æ–≤–∞—Ä–∞—Ö –ø–æ—Ç–µ—Ä—è–Ω—ã. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞.")
        await state.clear()
        return

    await state.update_data(page=page)
    await show_accounts_page(None, callback, accounts, page, state)

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–Ω–æ–ø–∫–∏ "–ó–∞—Ä–∞–±–æ—Ç–∞—Ç—å —Å–ª–∏—Ç–∫–∏"
@dp.message(F.text == "üí∞ –ó–∞—Ä–∞–±–æ—Ç–∞—Ç—å —Å–ª–∏—Ç–∫–∏")
async def earn_coins(message: types.Message):
    user_id = message.from_user.id

    try:
        cursor.execute(
            "SELECT balance, referral_id, referrals_count FROM users WHERE user_id = ?",
            (user_id,))
        user = cursor.fetchone()

        if user:
            balance, referral_id, referrals_count = user
            earn_text = (
                f"{INDENT}üí∞ –£ –≤–∞—Å <b>{balance}</b> —Å–ª–∏—Ç–∫–æ–≤\n\n"
                f"{INDENT}üí∞ –ó–∞—Ä–∞–±–æ—Ç–∞—Ç—å —Å–ª–∏—Ç–∫–∏ –º–æ–∂–Ω–æ —Ç–∞–∫:\n"
                f"{INDENT}–ü—Ä–∏–≥–ª–∞—à–∞–π –¥—Ä—É–∑–µ–π –ø–æ —Å–≤–æ–µ–π —Å—Å—ã–ª–∫–µ:\n"
                f"{INDENT}https://t.me/{(await bot.get_me()).username}?start={referral_id}\n\n"
                f"{INDENT}–ó–∞ –∫–∞–∂–¥–æ–≥–æ –ø—Ä–∏–≥–ª–∞—à–µ–Ω–Ω–æ–≥–æ –¥—Ä—É–≥–∞ –≤—ã –ø–æ–ª—É—á–∏—Ç–µ <b>1</b> —Å–ª–∏—Ç–æ–∫!"
            )
            await message.answer(earn_text)
        else:
            await message.answer(f"{INDENT}–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–µ—Ä–µ–∑–∞–ø—É—Å—Ç–∏—Ç—å –±–æ—Ç–∞ (/start).")
    except Exception as e:
        logger.error(f"Error fetching earn coins info for user {user_id}: {e}")
        await message.answer(f"{INDENT}–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.")

# –ê–¥–º–∏–Ω-–∫–æ–º–∞–Ω–¥—ã
@dp.message(Command("admin"))
async def cmd_admin(message: types.Message):
    if message.from_user.id not in ADMIN_IDS:
        await message.answer(f"{INDENT}–£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞.")
        return

    await message.answer(f"{INDENT}–ê–¥–º–∏–Ω-–ø–∞–Ω–µ–ª—å:", reply_markup=admin_keyboard())

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∑–∞–≥—Ä—É–∑–∫–∏ –Ω–æ–≤–æ–≥–æ —Ç–æ–≤–∞—Ä–∞
@dp.callback_query(F.data == "upload_product")
async def upload_product(callback: types.CallbackQuery, state: FSMContext):
    if callback.from_user.id not in ADMIN_IDS:
        await callback.answer("–£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞.", show_alert=True)
        return

    cursor.execute("SELECT name, display_name FROM categories")
    categories = cursor.fetchall()

    if not categories:
        await callback.message.answer(f"{INDENT}–°–Ω–∞—á–∞–ª–∞ —Å–æ–∑–¥–∞–π—Ç–µ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ —á–µ—Ä–µ–∑ –∞–¥–º–∏–Ω-–ø–∞–Ω–µ–ª—å.")
        return

    builder = InlineKeyboardBuilder()
    for category in categories:
        builder.add(InlineKeyboardButton(
            text=category[1],
            callback_data=f"new_product_category_{category[0]}"
        ))
    builder.adjust(2)

    await state.set_state(AdminStates.waiting_for_new_product_category)
    await callback.message.answer(
        f"{INDENT}–í—ã–±–µ—Ä–∏—Ç–µ –∫–∞—Ç–µ–≥–æ—Ä–∏—é –¥–ª—è –Ω–æ–≤–æ–≥–æ —Ç–æ–≤–∞—Ä–∞:",
        reply_markup=builder.as_markup()
    )

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –≤—ã–±–æ—Ä–∞ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ –¥–ª—è –Ω–æ–≤–æ–≥–æ —Ç–æ–≤–∞—Ä–∞
@dp.callback_query(F.data.startswith("new_product_category_"))
async def select_new_product_category(callback: types.CallbackQuery, state: FSMContext):
    category = callback.data.split("_")[3]
    await state.update_data(category=category)

    await state.set_state(AdminStates.waiting_for_new_product_level)
    await callback.message.answer(
        f"{INDENT}–í–≤–µ–¥–∏—Ç–µ —É—Ä–æ–≤–µ–Ω—å —Ç–æ–≤–∞—Ä–∞ –¥–ª—è –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ <b>{category}</b> (–Ω–∞–ø—Ä–∏–º–µ—Ä, 0, 10, 8-10, –∏–ª–∏ 'random'):\n"
        f"{INDENT}–û—Ç–ø—Ä–∞–≤—å—Ç–µ /cancel –¥–ª—è –æ—Ç–º–µ–Ω—ã."
    )

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –≤–≤–æ–¥–∞ —É—Ä–æ–≤–Ω—è –¥–ª—è –Ω–æ–≤–æ–≥–æ —Ç–æ–≤–∞—Ä–∞
@dp.message(AdminStates.waiting_for_new_product_level)
async def process_new_product_level(message: types.Message, state: FSMContext):
    if message.text == "/cancel":
        await state.clear()
        await message.answer(f"{INDENT}–î–æ–±–∞–≤–ª–µ–Ω–∏–µ —Ç–æ–≤–∞—Ä–∞ –æ—Ç–º–µ–Ω–µ–Ω–æ.")
        return

    level_input = message.text.strip().lower()
    if level_input != "random" and "-" not in level_input:
        try:
            level_int = int(level_input)
            if level_int < 0:
                await message.answer(f"{INDENT}–û—à–∏–±–∫–∞: —É—Ä–æ–≤–µ–Ω—å –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –ø–æ–ª–æ–∂–∏—Ç–µ–ª—å–Ω—ã–º —á–∏—Å–ª–æ–º.")
                return
        except ValueError:
            await message.answer(
                f"{INDENT}–û—à–∏–±–∫–∞: —É—Ä–æ–≤–µ–Ω—å –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å —á–∏—Å–ª–æ–º, –¥–∏–∞–ø–∞–∑–æ–Ω–æ–º (–Ω–∞–ø—Ä–∏–º–µ—Ä, 1-3) –∏–ª–∏ 'random'."
            )
            return

    await state.update_data(level=level_input)
    await state.set_state(AdminStates.waiting_for_new_product_price)
    await message.answer(
        f"{INDENT}–í–≤–µ–¥–∏—Ç–µ —Ü–µ–Ω—É —Ç–æ–≤–∞—Ä–∞ –≤ —Å–ª–∏—Ç–∫–∞—Ö (—Ü–µ–ª–æ–µ —á–∏—Å–ª–æ, –Ω–∞–ø—Ä–∏–º–µ—Ä, 50).\n"
        f"{INDENT}–û—Ç–ø—Ä–∞–≤—å—Ç–µ /cancel –¥–ª—è –æ—Ç–º–µ–Ω—ã."
    )

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –≤–≤–æ–¥–∞ —Ü–µ–Ω—ã —Ç–æ–≤–∞—Ä–∞
@dp.message(AdminStates.waiting_for_new_product_price)
async def process_new_product_price(message: types.Message, state: FSMContext):
    if message.text == "/cancel":
        await state.clear()
        await message.answer(f"{INDENT}–î–æ–±–∞–≤–ª–µ–Ω–∏–µ —Ç–æ–≤–∞—Ä–∞ –æ—Ç–º–µ–Ω–µ–Ω–æ.")
        return

    try:
        price = int(message.text.strip())
        if price < 0:
            await message.answer(f"{INDENT}–¶–µ–Ω–∞ –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å –Ω–µ–æ—Ç—Ä–∏—Ü–∞—Ç–µ–ª—å–Ω—ã–º —á–∏—Å–ª–æ–º.")
            return
    except ValueError:
        await message.answer(f"{INDENT}–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–µ —á–∏—Å–ª–æ –¥–ª—è —Ü–µ–Ω—ã.")
        return

    await state.update_data(price=price)

    await state.set_state(AdminStates.waiting_for_new_product_description)
    await message.answer(
        f"{INDENT}–í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ —Ç–æ–≤–∞—Ä–∞ (–Ω–∞–ø—Ä–∏–º–µ—Ä, '–ê–∫–∫–∞—É–Ω—Ç 10 —É—Ä–æ–≤–Ω—è'):\n"
        f"{INDENT}–û—Ç–ø—Ä–∞–≤—å—Ç–µ /cancel –¥–ª—è –æ—Ç–º–µ–Ω—ã."
    )

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –≤–≤–æ–¥–∞ –Ω–∞–∑–≤–∞–Ω–∏—è —Ç–æ–≤–∞—Ä–∞
@dp.message(AdminStates.waiting_for_new_product_description)
async def process_new_product_description(message: types.Message, state: FSMContext):
    if message.text == "/cancel":
        await state.clear()
        await message.answer(f"{INDENT}–î–æ–±–∞–≤–ª–µ–Ω–∏–µ —Ç–æ–≤–∞—Ä–∞ –æ—Ç–º–µ–Ω–µ–Ω–æ.")
        return

    description = message.text.strip()
    await state.update_data(description=description)

    await state.set_state(AdminStates.waiting_for_new_product_accounts)
    await message.answer(
        f"{INDENT}–û—Ç–ø—Ä–∞–≤—å—Ç–µ –∞–∫–∫–∞—É–Ω—Ç—ã –¥–ª—è —Ç–æ–≤–∞—Ä–∞(–µ—Å–ª–∏ —Ä–∞–Ω–¥–æ–º –∏–ª–∏ –ª–≤–ª-–ª–≤–ª —Ç–æ –¥–æ–±–∞–≤–ª—è—Ç—å"
        f" –∫ –∫–æ–Ω—Ü—É :–∏ —Ç—É—Ç –ª–≤–ª –∞–∫–∫–∞. –ø—Ä–∏–º–µ—Ä: –ª–æ–≥–∏–Ω:–ø–∞—Ä–æ–ª—å:3 –≤ —Ñ–æ—Ä–º–∞—Ç–µ:\n"
        f"{INDENT}–ª–æ–≥–∏–Ω:–ø–∞—Ä–æ–ª—å\n"
        f"{INDENT}–ª–æ–≥–∏–Ω2:–ø–∞—Ä–æ–ª—å2\n"
        f"{INDENT}–∏ —Ç.–¥.\n\n"
        f"{INDENT}–û—Ç–ø—Ä–∞–≤—å—Ç–µ /cancel –¥–ª—è –æ—Ç–º–µ–Ω—ã."
    )

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –≤–≤–æ–¥–∞ –∞–∫–∫–∞—É–Ω—Ç–æ–≤ –¥–ª—è –Ω–æ–≤–æ–≥–æ —Ç–æ–≤–∞—Ä–∞
@dp.message(AdminStates.waiting_for_new_product_accounts)
async def process_new_product_accounts(message: types.Message, state: FSMContext):
    if message.text == "/cancel":
        await state.clear()
        await message.answer(f"{INDENT}–î–æ–±–∞–≤–ª–µ–Ω–∏–µ —Ç–æ–≤–∞—Ä–∞ –æ—Ç–º–µ–Ω–µ–Ω–æ.")
        return

    data = await state.get_data()
    category = data.get('category')
    level_input = data.get('level')
    price = data.get('price')
    description = ' '.join(data.get('description').strip().split())  # –ù–æ—Ä–º–∞–ª–∏–∑–∞—Ü–∏—è –º–Ω–æ–∂–µ—Å—Ç–≤–µ–Ω–Ω—ã—Ö –ø—Ä–æ–±–µ–ª–æ–≤

    accounts_text = message.text.strip()
    if not accounts_text:
        await message.answer(f"{INDENT}–û—à–∏–±–∫–∞: –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω –ø—É—Å—Ç–æ–π —Å–ø–∏—Å–æ–∫ –∞–∫–∫–∞—É–Ω—Ç–æ–≤.")
        await state.clear()
        return

    accounts = accounts_text.split('\n')
    added = 0
    errors = []

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –ª–∏ —Ç–æ–≤–∞—Ä —Å —Ç–∞–∫–∏–º–∏ –ø–∞—Ä–∞–º–µ—Ç—Ä–∞–º–∏
    cursor.execute(
        "SELECT COUNT(*) FROM accounts WHERE category = ? AND TRIM(LOWER(description)) = TRIM(LOWER(?)) AND price = ?",
        (category, description, price)
    )
    existing_count = cursor.fetchone()[0]

    for account in accounts:
        account = account.strip()
        if not account:
            continue

        # –†–∞–∑–¥–µ–ª—è–µ–º —Å—Ç—Ä–æ–∫—É –Ω–∞ —á–∞—Å—Ç–∏ (–ª–æ–≥–∏–Ω:–ø–∞—Ä–æ–ª—å:—É—Ä–æ–≤–µ–Ω—å –∏–ª–∏ –ª–æ–≥–∏–Ω:–ø–∞—Ä–æ–ª—å)
        parts = account.split(':')
        if len(parts) < 2:
            errors.append(f"–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç: {account}. –û–∂–∏–¥–∞–µ—Ç—Å—è –ª–æ–≥–∏–Ω:–ø–∞—Ä–æ–ª—å[:—É—Ä–æ–≤–µ–Ω—å]")
            continue

        login = parts[0].strip()
        password = parts[1].strip()
        account_level = None

        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —É–∫–∞–∑–∞–Ω –ª–∏ —É—Ä–æ–≤–µ–Ω—å
        if len(parts) > 2:
            level_part = parts[2].strip()
            if '-' in level_part:  # –î–∏–∞–ø–∞–∑–æ–Ω, –Ω–∞–ø—Ä–∏–º–µ—Ä, 1-3
                try:
                    start, end = map(int, level_part.split('-'))
                    if start < 0 or end < 0 or start > end:
                        errors.append(f"–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π –¥–∏–∞–ø–∞–∑–æ–Ω —É—Ä–æ–≤–Ω—è: {level_part}")
                        continue
                    account_level = str(random.randint(start, end))
                    logger.info(f"Level for {login} set from range {level_part}: {account_level}")
                except ValueError:
                    errors.append(f"–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –¥–∏–∞–ø–∞–∑–æ–Ω–∞ —É—Ä–æ–≤–Ω—è: {level_part}")
                    continue
            else:  # –ö–æ–Ω–∫—Ä–µ—Ç–Ω–æ–µ —á–∏—Å–ª–æ, –Ω–∞–ø—Ä–∏–º–µ—Ä, 5
                try:
                    account_level = str(int(level_part))
                    logger.info(f"Level for {login} set explicitly: {account_level}")
                except ValueError:
                    errors.append(f"–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ —É—Ä–æ–≤–Ω—è: {level_part}")
                    continue
        else:
            # –ï—Å–ª–∏ —É—Ä–æ–≤–µ–Ω—å –Ω–µ —É–∫–∞–∑–∞–Ω, –∏—Å–ø–æ–ª—å–∑—É–µ–º level_input
            if level_input == "random":
                account_level = str(random.randint(1, 10))
                logger.info(f"Level for {login} set randomly (1-10): {account_level}")
            elif "-" in level_input:
                start, end = map(int, level_input.split("-"))
                account_level = str(random.randint(start, end))
                logger.info(f"Level for {login} set from range {level_input}: {account_level}")
            else:
                account_level = level_input
                logger.info(f"Level for {login} set from specified level: {account_level}")

        if not login or not password:
            errors.append(f"–ü—É—Å—Ç–æ–π –ª–æ–≥–∏–Ω –∏–ª–∏ –ø–∞—Ä–æ–ª—å: {account}")
            continue

        # –õ–æ–≥–∏—Ä—É–µ–º –¥–∞–Ω–Ω—ã–µ –ø–µ—Ä–µ–¥ –¥–æ–±–∞–≤–ª–µ–Ω–∏–µ–º
        logger.info(f"Adding account: category={category}, description={description}, price={price}, level={account_level}, login={login}")

        try:
            cursor.execute(
                "INSERT INTO accounts (category, login, password, level, price, description) VALUES (?, ?, ?, ?, ?, ?)",
                (category, login, password, account_level, price, description)
            )
            added += 1
        except Exception as e:
            errors.append(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –¥–æ–±–∞–≤–ª–µ–Ω–∏–∏ {account}: {str(e)}")

    conn.commit()

    response = f"{INDENT}–£—Å–ø–µ—à–Ω–æ –¥–æ–±–∞–≤–ª–µ–Ω–æ <b>{added}</b> –∞–∫–∫–∞—É–Ω—Ç–æ–≤ –¥–ª—è —Ç–æ–≤–∞—Ä–∞ <b>{description}</b> –≤ –∫–∞—Ç–µ–≥–æ—Ä–∏—é <b>{category}</b>."
    if existing_count > 0:
        response += f"\n{INDENT}–í–Ω–∏–º–∞–Ω–∏–µ: —Ç–æ–≤–∞—Ä —Å —Ç–∞–∫–∏–º –æ–ø–∏—Å–∞–Ω–∏–µ–º –∏ —Ü–µ–Ω–æ–π —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç (–≤ –Ω–∞–ª–∏—á–∏–∏: {existing_count})."
    if errors:
        response += f"\n\n{INDENT}–û—à–∏–±–∫–∏ –ø—Ä–∏ –¥–æ–±–∞–≤–ª–µ–Ω–∏–∏:\n"
        for error in errors:
            response += f"{INDENT}- {error}\n"

    cursor.execute(
        "SELECT id, login, password, level FROM accounts WHERE category = ? AND description = ? ORDER BY id DESC LIMIT ?",
        (category, description, added)
    )
    accounts = cursor.fetchall()

    text = f"{INDENT}–î–æ–±–∞–≤–ª–µ–Ω–Ω—ã–µ –∞–∫–∫–∞—É–Ω—Ç—ã:\n\n"
    for account in accounts:
        account_id, login, password, level = account
        text += (
            f"{INDENT}ID: {account_id}\n"
            f"{INDENT}üë§ –õ–æ–≥–∏–Ω: <b>{login}</b>\n"
            f"{INDENT}üîí –ü–∞—Ä–æ–ª—å: <b>{password}</b>\n"
            f"{INDENT}üìä –£—Ä–æ–≤–µ–Ω—å: {level or '–ù–µ —É–∫–∞–∑–∞–Ω'}\n\n"
        )

    if len(text) > 4096:
        parts = []
        while len(text) > 4096:
            part = text[:4096]
            last_newline = part.rfind('\n')
            if last_newline == -1:
                last_newline = 4096
            parts.append(text[:last_newline])
            text = text[last_newline + 1:]
        parts.append(text)
        await message.answer(response)
        for part in parts:
            await message.answer(part)
    else:
        await message.answer(response)
        await message.answer(text)

    await state.clear()

@dp.callback_query(F.data == "replenish_product")
async def replenish_product(callback: types.CallbackQuery, state: FSMContext):
    if callback.from_user.id not in ADMIN_IDS:
        await callback.answer("–£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞.", show_alert=True)
        return

    cursor.execute("SELECT name, display_name FROM categories")
    categories = cursor.fetchall()

    if not categories:
        await callback.message.answer(f"{INDENT}–ù–µ—Ç –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –∫–∞—Ç–µ–≥–æ—Ä–∏–π.")
        return

    builder = InlineKeyboardBuilder()
    for category in categories:
        builder.add(InlineKeyboardButton(
            text=category[1],
            callback_data=f"replenish_category_{category[0]}"
        ))
    builder.adjust(2)

    await callback.message.answer(
        f"{INDENT}–í—ã–±–µ—Ä–∏—Ç–µ –∫–∞—Ç–µ–≥–æ—Ä–∏—é –¥–ª—è –ø–æ–ø–æ–ª–Ω–µ–Ω–∏—è —Ç–æ–≤–∞—Ä–æ–≤:",
        reply_markup=builder.as_markup()
    )

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –≤—ã–±–æ—Ä–∞ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ –¥–ª—è –ø–æ–ø–æ–ª–Ω–µ–Ω–∏—è —Ç–æ–≤–∞—Ä–∞
@dp.callback_query(F.data.startswith("replenish_category_"))
async def select_replenish_category(callback: types.CallbackQuery, state: FSMContext):
    category = callback.data.split("_")[2]
    await state.update_data(category=category)

    cursor.execute(
        """
        SELECT TRIM(LOWER(description)) as description, COALESCE(price, 0) as price, NULL as level, COUNT(*) as count
        FROM accounts
        WHERE category = ? AND claimed_by IS NULL
        GROUP BY TRIM(LOWER(description)), price
        """,
        (category,)
    )
    products = cursor.fetchall()

    if not products:
        await callback.message.answer(
            f"{INDENT}–í –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ <b>{category}</b> –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–Ω—ã—Ö —Ç–æ–≤–∞—Ä–æ–≤ –¥–ª—è –ø–æ–ø–æ–ª–Ω–µ–Ω–∏—è.")
        await state.clear()
        return

    builder = InlineKeyboardBuilder()
    product_list = []
    for product in products:
        description, price, level, count = product
        description = description if description else "–ë–µ–∑ –Ω–∞–∑–≤–∞–Ω–∏—è"
        level = level if level else "–ù–µ —É–∫–∞–∑–∞–Ω"
        product_list.append({"category": category, "description": description, "price": price, "level": level, "count": count})
        index = len(product_list) - 1
        builder.add(InlineKeyboardButton(
            text=f"{description} - {price} —Å–ª–∏—Ç–∫–æ–≤ (–≤ –Ω–∞–ª–∏—á–∏–∏: {count})",
            callback_data=f"replenish_product_{index}"
        ))

    builder.add(InlineKeyboardButton(
        text="‚¨ÖÔ∏è –ù–∞–∑–∞–¥",
        callback_data="replenish_product"
    ))
    builder.adjust(1)

    await state.update_data(product_list=product_list)
    await state.set_state(AdminStates.waiting_for_replenish_product)
    await callback.message.edit_text(
        f"{INDENT}–í—ã–±–µ—Ä–∏—Ç–µ —Ç–æ–≤–∞—Ä –¥–ª—è –ø–æ–ø–æ–ª–Ω–µ–Ω–∏—è –≤ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ <b>{category}</b>:",
        reply_markup=builder.as_markup()
    )

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –≤—ã–±–æ—Ä–∞ —Ç–æ–≤–∞—Ä–∞ –¥–ª—è –ø–æ–ø–æ–ª–Ω–µ–Ω–∏—è
@dp.callback_query(F.data.startswith("replenish_product_"))
async def select_replenish_product(callback: types.CallbackQuery, state: FSMContext):
    index = int(callback.data.split("_")[2])
    user_id = callback.from_user.id

    if user_id not in ADMIN_IDS:
        await callback.answer("–£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞.", show_alert=True)
        return

    state_data = await state.get_data()
    product_list = state_data.get("product_list", [])

    if index < 0 or index >= len(product_list):
        await callback.answer("–û—à–∏–±–∫–∞: —Ç–æ–≤–∞—Ä –Ω–µ –Ω–∞–π–¥–µ–Ω.", show_alert=True)
        return

    product = product_list[index]
    description = product["description"]
    await state.update_data(description=description)

    await state.set_state(AdminStates.waiting_for_replenish_accounts)
    await callback.message.edit_text(
        f"{INDENT}–û—Ç–ø—Ä–∞–≤—å—Ç–µ –∞–∫–∫–∞—É–Ω—Ç—ã –¥–ª—è –ø–æ–ø–æ–ª–Ω–µ–Ω–∏—è —Ç–æ–≤–∞—Ä–∞ <b>{description}</b> –≤ —Ñ–æ—Ä–º–∞—Ç–µ:\n"
        f"{INDENT}–ª–æ–≥–∏–Ω:–ø–∞—Ä–æ–ª—å\n"
        f"{INDENT}–ª–æ–≥–∏–Ω2:–ø–∞—Ä–æ–ª—å2\n"
        f"{INDENT}–∏ —Ç.–¥.\n\n"
        f"{INDENT}–û—Ç–ø—Ä–∞–≤—å—Ç–µ /cancel –¥–ª—è –æ—Ç–º–µ–Ω—ã."
    )

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –≤–≤–æ–¥–∞ –∞–∫–∫–∞—É–Ω—Ç–æ–≤ –¥–ª—è –ø–æ–ø–æ–ª–Ω–µ–Ω–∏—è —Ç–æ–≤–∞—Ä–∞
@dp.message(AdminStates.waiting_for_replenish_accounts)
async def process_replenish_accounts(message: types.Message, state: FSMContext):
    if message.text == "/cancel":
        await state.clear()
        await message.answer(f"{INDENT}–ü–æ–ø–æ–ª–Ω–µ–Ω–∏–µ —Ç–æ–≤–∞—Ä–∞ –æ—Ç–º–µ–Ω–µ–Ω–æ.")
        return

    data = await state.get_data()
    category = data.get('category')
    description = ' '.join(data.get('description').strip().split())  # –ù–æ—Ä–º–∞–ª–∏–∑–∞—Ü–∏—è –º–Ω–æ–∂–µ—Å—Ç–≤–µ–Ω–Ω—ã—Ö –ø—Ä–æ–±–µ–ª–æ–≤

    cursor.execute(
        """
        SELECT COALESCE(price, 0) as price, TRIM(LOWER(level)) as level
        FROM accounts
        WHERE category = ? AND TRIM(LOWER(description)) = TRIM(LOWER(?))
        LIMIT 1
        """,
        (category, description if description != "–ë–µ–∑ –Ω–∞–∑–≤–∞–Ω–∏—è" else None)
    )
    product = cursor.fetchone()
    if not product:
        await message.answer(f"{INDENT}–û—à–∏–±–∫–∞: —Ç–æ–≤–∞—Ä –Ω–µ –Ω–∞–π–¥–µ–Ω.")
        await state.clear()
        return

    price, default_level = product

    accounts_text = message.text.strip()
    if not accounts_text:
        await message.answer(f"{INDENT}–û—à–∏–±–∫–∞: –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω –ø—É—Å—Ç–æ–π —Å–ø–∏—Å–æ–∫ –∞–∫–∫–∞—É–Ω—Ç–æ–≤.")
        await state.clear()
        return

    accounts = accounts_text.split('\n')
    added = 0
    errors = []

    for account in accounts:
        account = account.strip()
        if not account:
            continue

        # –†–∞–∑–¥–µ–ª—è–µ–º —Å—Ç—Ä–æ–∫—É –Ω–∞ —á–∞—Å—Ç–∏ (–ª–æ–≥–∏–Ω:–ø–∞—Ä–æ–ª—å:—É—Ä–æ–≤–µ–Ω—å –∏–ª–∏ –ª–æ–≥–∏–Ω:–ø–∞—Ä–æ–ª—å)
        parts = account.split(':')
        if len(parts) < 2:
            errors.append(f"–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç: {account}. –û–∂–∏–¥–∞–µ—Ç—Å—è –ª–æ–≥–∏–Ω:–ø–∞—Ä–æ–ª—å[:—É—Ä–æ–≤–µ–Ω—å]")
            continue

        login = parts[0].strip()
        password = parts[1].strip()
        account_level = None

        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —É–∫–∞–∑–∞–Ω –ª–∏ —É—Ä–æ–≤–µ–Ω—å
        if len(parts) > 2:
            level_part = parts[2].strip()
            if '-' in level_part:  # –î–∏–∞–ø–∞–∑–æ–Ω, –Ω–∞–ø—Ä–∏–º–µ—Ä, 1-3
                try:
                    start, end = map(int, level_part.split('-'))
                    if start < 0 or end < 0 or start > end:
                        errors.append(f"–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π –¥–∏–∞–ø–∞–∑–æ–Ω —É—Ä–æ–≤–Ω—è: {level_part}")
                        continue
                    account_level = str(random.randint(start, end))
                    logger.info(f"Level for {login} set from range {level_part}: {account_level}")
                except ValueError:
                    errors.append(f"–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –¥–∏–∞–ø–∞–∑–æ–Ω–∞ —É—Ä–æ–≤–Ω—è: {level_part}")
                    continue
            else:  # –ö–æ–Ω–∫—Ä–µ—Ç–Ω–æ–µ —á–∏—Å–ª–æ, –Ω–∞–ø—Ä–∏–º–µ—Ä, 5
                try:
                    account_level = str(int(level_part))
                    logger.info(f"Level for {login} set explicitly: {account_level}")
                except ValueError:
                    errors.append(f"–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ —É—Ä–æ–≤–Ω—è: {level_part}")
                    continue
        else:
            # –ï—Å–ª–∏ —É—Ä–æ–≤–µ–Ω—å –Ω–µ —É–∫–∞–∑–∞–Ω, –∏—Å–ø–æ–ª—å–∑—É–µ–º default_level –∏–∑ —Å—É—â–µ—Å—Ç–≤—É—é—â–µ–≥–æ —Ç–æ–≤–∞—Ä–∞
            account_level = default_level
            logger.info(f"Level for {login} set from default level: {account_level}")

        if not login or not password:
            errors.append(f"–ü—É—Å—Ç–æ–π –ª–æ–≥–∏–Ω –∏–ª–∏ –ø–∞—Ä–æ–ª—å: {account}")
            continue

        # –õ–æ–≥–∏—Ä—É–µ–º –¥–∞–Ω–Ω—ã–µ –ø–µ—Ä–µ–¥ –¥–æ–±–∞–≤–ª–µ–Ω–∏–µ–º
        logger.info(f"Replenishing account: category={category}, description={description}, price={price}, level={account_level}, login={login}")

        try:
            cursor.execute(
                "INSERT INTO accounts (category, login, password, level, price, description) VALUES (?, ?, ?, ?, ?, ?)",
                (category, login, password, account_level, price, description)
            )
            added += 1
        except Exception as e:
            errors.append(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –¥–æ–±–∞–≤–ª–µ–Ω–∏–∏ {account}: {str(e)}")

    conn.commit()

    response = f"{INDENT}–£—Å–ø–µ—à–Ω–æ –¥–æ–±–∞–≤–ª–µ–Ω–æ <b>{added}</b> –∞–∫–∫–∞—É–Ω—Ç–æ–≤ –¥–ª—è —Ç–æ–≤–∞—Ä–∞ <b>{description}</b> –≤ –∫–∞—Ç–µ–≥–æ—Ä–∏—é <b>{category}</b>."
    if errors:
        response += f"\n\n{INDENT}–û—à–∏–±–∫–∏ –ø—Ä–∏ –¥–æ–±–∞–≤–ª–µ–Ω–∏–∏:\n"
        for error in errors:
            response += f"{INDENT}- {error}\n"

    cursor.execute(
        "SELECT id, login, password, level FROM accounts WHERE category = ? AND description = ? ORDER BY id DESC LIMIT ?",
        (category, description, added)
    )
    accounts = cursor.fetchall()

    text = f"{INDENT}–î–æ–±–∞–≤–ª–µ–Ω–Ω—ã–µ –∞–∫–∫–∞—É–Ω—Ç—ã:\n\n"
    for account in accounts:
        account_id, login, password, level = account
        text += (
            f"{INDENT}ID: {account_id}\n"
            f"{INDENT}üë§ –õ–æ–≥–∏–Ω: <b>{login}</b>\n"
            f"{INDENT}üîí –ü–∞—Ä–æ–ª—å: <b>{password}</b>\n"
            f"{INDENT}üìä –£—Ä–æ–≤–µ–Ω—å: {level or '–ù–µ —É–∫–∞–∑–∞–Ω'}\n\n"
        )

    if len(text) > 4096:
        parts = []
        while len(text) > 4096:
            part = text[:4096]
            last_newline = part.rfind('\n')
            if last_newline == -1:
                last_newline = 4096
            parts.append(text[:last_newline])
            text = text[last_newline + 1:]
        parts.append(text)
        await message.answer(response)
        for part in parts:
            await message.answer(part)
    else:
        await message.answer(response)
        await message.answer(text)

    await state.clear()

@dp.callback_query(F.data == "view_products")
async def view_products(callback: types.CallbackQuery):
    if callback.from_user.id not in ADMIN_IDS:
        await callback.answer("–£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞.", show_alert=True)
        return

    cursor.execute("SELECT name, display_name FROM categories")
    categories = cursor.fetchall()

    if not categories:
        await callback.message.answer(f"{INDENT}–ù–µ—Ç –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –∫–∞—Ç–µ–≥–æ—Ä–∏–π.")
        return

    builder = InlineKeyboardBuilder()
    for category in categories:
        builder.add(InlineKeyboardButton(
            text=category[1],
            callback_data=f"view_category_products_{category[0]}"
        ))
    builder.adjust(2)

    await callback.message.edit_text(
        f"{INDENT}–í—ã–±–µ—Ä–∏—Ç–µ –∫–∞—Ç–µ–≥–æ—Ä–∏—é –¥–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ —Ç–æ–≤–∞—Ä–æ–≤:",
        reply_markup=builder.as_markup()
    )

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ —Ç–æ–≤–∞—Ä–æ–≤ –≤ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏
@dp.callback_query(F.data.startswith("view_category_products_"))
async def view_category_products(callback: types.CallbackQuery, state: FSMContext):
    category = callback.data.split("_")[3]

    cursor.execute(
        """
        SELECT TRIM(LOWER(description)) as description, COALESCE(price, 0) as price, NULL as level, COUNT(*) as count
        FROM accounts
        WHERE category = ? AND claimed_by IS NULL
        GROUP BY TRIM(LOWER(description)), price
        """,
        (category,)
    )
    products = cursor.fetchall()

    if not products:
        await callback.message.edit_text(f"{INDENT}–í –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ <b>{category}</b> –Ω–µ—Ç —Ç–æ–≤–∞—Ä–æ–≤.")
        return

    text = f"{INDENT}–¢–æ–≤–∞—Ä—ã –≤ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ <b>{category}</b>:\n\n"
    for idx, product in enumerate(products, 1):
        description, price, level, count = product
        description = description if description else "–ë–µ–∑ –Ω–∞–∑–≤–∞–Ω–∏—è"
        level = level if level else "–ù–µ —É–∫–∞–∑–∞–Ω"
        text += (
            f"{INDENT}{idx}. –û–ø–∏—Å–∞–Ω–∏–µ: <b>{description}</b>\n"
            f"{INDENT}üí∞ –¶–µ–Ω–∞: {price} —Å–ª–∏—Ç–∫–æ–≤\n"
            f"{INDENT}üìä –£—Ä–æ–≤–µ–Ω—å: {level}\n"
            f"{INDENT}üì¶ –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ: {count}\n\n"
        )

    builder = InlineKeyboardBuilder()
    builder.add(InlineKeyboardButton(
        text="‚¨ÖÔ∏è –ù–∞–∑–∞–¥ –∫ –∫–∞—Ç–µ–≥–æ—Ä–∏—è–º",
        callback_data="view_products"
    ))
    builder.adjust(1)

    if len(text) > 4096:
        parts = []
        while len(text) > 4096:
            part = text[:4096]
            last_newline = part.rfind('\n')
            if last_newline == -1:
                last_newline = 4096
            parts.append(text[:last_newline])
            text = text[last_newline + 1:]
        parts.append(text)
        await callback.message.edit_text(parts[0], reply_markup=builder.as_markup())
        for part in parts[1:]:
            await callback.message.answer(part)
    else:
        await callback.message.edit_text(text, reply_markup=builder.as_markup())

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ —É–¥–∞–ª–µ–Ω–∏—è —Ç–æ–≤–∞—Ä–æ–≤
@dp.callback_query(F.data == "delete_products")
async def delete_products(callback: types.CallbackQuery, state: FSMContext):
    if callback.from_user.id not in ADMIN_IDS:
        await callback.answer("–£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞.", show_alert=True)
        return

    cursor.execute("SELECT name, display_name FROM categories")
    categories = cursor.fetchall()

    if not categories:
        await callback.message.answer(f"{INDENT}–ù–µ—Ç –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –∫–∞—Ç–µ–≥–æ—Ä–∏–π –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è —Ç–æ–≤–∞—Ä–æ–≤.")
        return

    builder = InlineKeyboardBuilder()
    for category in categories:
        builder.add(InlineKeyboardButton(
            text=category[1],
            callback_data=f"select_delete_product_category_{category[0]}"
        ))
    builder.adjust(2)

    await callback.message.answer(
        f"{INDENT}–í—ã–±–µ—Ä–∏—Ç–µ –∫–∞—Ç–µ–≥–æ—Ä–∏—é –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è —Ç–æ–≤–∞—Ä–æ–≤:",
        reply_markup=builder.as_markup()
    )

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –≤—ã–±–æ—Ä–∞ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è —Ç–æ–≤–∞—Ä–∞
@dp.callback_query(F.data.startswith("select_delete_product_category_"))
async def select_delete_product_category(callback: types.CallbackQuery, state: FSMContext):
    category = callback.data.split("_")[4]
    await state.update_data(category=category)

    cursor.execute(
        """
        SELECT TRIM(LOWER(description)) as description, COALESCE(price, 0) as price, NULL as level, COUNT(*) as count
        FROM accounts
        WHERE category = ? AND claimed_by IS NULL
        GROUP BY TRIM(LOWER(description)), price
        """,
        (category,)
    )
    products = cursor.fetchall()

    if not products:
        await callback.message.answer(
            f"{INDENT}–í –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ <b>{category}</b> –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–Ω—ã—Ö —Ç–æ–≤–∞—Ä–æ–≤ –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è.")
        await state.clear()
        return

    builder = InlineKeyboardBuilder()
    product_list = []
    for product in products:
        description, price, level, count = product
        description = description if description else "–ë–µ–∑ –Ω–∞–∑–≤–∞–Ω–∏—è"
        level = level if level else "–ù–µ —É–∫–∞–∑–∞–Ω"
        product_list.append({"category": category, "description": description, "price": price, "level": level, "count": count})
        index = len(product_list) - 1
        builder.add(InlineKeyboardButton(
            text=f"{description} (–≤ –Ω–∞–ª–∏—á–∏–∏: {count})",
            callback_data=f"delete_product_{index}"
        ))

    builder.add(InlineKeyboardButton(
        text="‚¨ÖÔ∏è –ù–∞–∑–∞–¥",
        callback_data="delete_products"
    ))
    builder.adjust(1)

    await state.update_data(product_list=product_list)
    await state.set_state(AdminStates.waiting_for_delete_product)
    await callback.message.edit_text(
        f"{INDENT}–í—ã–±–µ—Ä–∏—Ç–µ —Ç–æ–≤–∞—Ä –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è –≤ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ <b>{category}</b>:",
        reply_markup=builder.as_markup()
    )

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ —É–¥–∞–ª–µ–Ω–∏—è –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–≥–æ —Ç–æ–≤–∞—Ä–∞
@dp.callback_query(F.data.startswith("delete_product_"))
async def process_product_deletion(callback: types.CallbackQuery, state: FSMContext):
    index = int(callback.data.split("_")[2])
    user_id = callback.from_user.id

    if user_id not in ADMIN_IDS:
        await callback.answer("–£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞.", show_alert=True)
        return

    state_data = await state.get_data()
    product_list = state_data.get("product_list", [])
    category = state_data.get("category")

    if index < 0 or index >= len(product_list):
        await callback.answer("–û—à–∏–±–∫–∞: —Ç–æ–≤–∞—Ä –Ω–µ –Ω–∞–π–¥–µ–Ω.", show_alert=True)
        return

    product = product_list[index]
    description = product["description"]

    try:
        cursor.execute(
            """
            DELETE FROM accounts
            WHERE category = ?
            AND TRIM(LOWER(description)) = TRIM(LOWER(?))
            """,
            (category, description if description != "–ë–µ–∑ –Ω–∞–∑–≤–∞–Ω–∏—è" else None)
        )
        conn.commit()
        logger.info(f"Successfully deleted product with description {description} in category {category}")
    except Exception as e:
        await callback.answer(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ —Ç–æ–≤–∞—Ä–∞: {str(e)}", show_alert=True)
        logger.error(f"Error deleting product with description {description}: {e}")
        return

    await callback.message.edit_text(
        f"{INDENT}–¢–æ–≤–∞—Ä <b>{description}</b> —É—Å–ø–µ—à–Ω–æ —É–¥–∞–ª–µ–Ω –∏–∑ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ <b>{category}</b>."
    )
    await state.clear()

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏
@dp.callback_query(F.data == "stats")
async def show_stats(callback: types.CallbackQuery):
    if callback.from_user.id not in ADMIN_IDS:
        await callback.answer("–£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞.", show_alert=True)
        return

    try:
        # –û–±—â–µ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
        cursor.execute("SELECT COUNT(*) FROM users")
        total_users = cursor.fetchone()[0]

        # –û–±—â–µ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –¥–æ—Å—Ç—É–ø–Ω—ã—Ö —Ç–æ–≤–∞—Ä–æ–≤
        cursor.execute("SELECT COUNT(*) FROM accounts WHERE claimed_by IS NULL")
        total_products = cursor.fetchone()[0]

        # –û–±—â–µ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∫—É–ø–ª–µ–Ω–Ω—ã—Ö –∞–∫–∫–∞—É–Ω—Ç–æ–≤
        cursor.execute("SELECT COUNT(*) FROM user_accounts")
        total_purchased = cursor.fetchone()[0]

        # –û–±—â–µ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Ä–µ—Ñ–µ—Ä–∞–ª–æ–≤
        cursor.execute("SELECT SUM(referrals_count) FROM users")
        total_referrals = cursor.fetchone()[0] or 0

        stats_text = (
            f"{INDENT}üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –±–æ—Ç–∞:\n\n"
            f"{INDENT}üë• –í—Å–µ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π: <b>{total_users}</b>\n"
            f"{INDENT}üì¶ –î–æ—Å—Ç—É–ø–Ω—ã—Ö —Ç–æ–≤–∞—Ä–æ–≤: <b>{total_products}</b>\n"
            f"{INDENT}üõí –ö—É–ø–ª–µ–Ω–æ –∞–∫–∫–∞—É–Ω—Ç–æ–≤: <b>{total_purchased}</b>\n"
            f"{INDENT}üìà –í—Å–µ–≥–æ —Ä–µ—Ñ–µ—Ä–∞–ª–æ–≤: <b>{total_referrals}</b>"
        )
        await callback.message.edit_text(stats_text)
    except Exception as e:
        logger.error(f"Error fetching stats: {e}")
        await callback.message.edit_text(f"{INDENT}–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏: {str(e)}")

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –Ω–∞—á–∞–ª–∞ –Ω–∞—á–∏—Å–ª–µ–Ω–∏—è —Å–ª–∏—Ç–∫–æ–≤
@dp.callback_query(F.data == "add_coins")
async def start_add_coins(callback: types.CallbackQuery, state: FSMContext):
    if callback.from_user.id not in ADMIN_IDS:
        await callback.answer("–£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞.", show_alert=True)
        return

    await state.set_state(AdminStates.waiting_for_add_coins)
    await callback.message.answer(
        f"{INDENT}–í–≤–µ–¥–∏—Ç–µ –¥–∞–Ω–Ω—ã–µ –¥–ª—è –Ω–∞—á–∏—Å–ª–µ–Ω–∏—è —Å–ª–∏—Ç–∫–æ–≤ –≤ —Ñ–æ—Ä–º–∞—Ç–µ:\n"
        f"{INDENT}user_id:–∫–æ–ª–∏—á–µ—Å—Ç–≤–æ (–Ω–∞–ø—Ä–∏–º–µ—Ä, 12345:10)\n"
        f"{INDENT}–û—Ç–ø—Ä–∞–≤—å—Ç–µ /cancel –¥–ª—è –æ—Ç–º–µ–Ω—ã."
    )

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –≤–≤–æ–¥–∞ –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –Ω–∞—á–∏—Å–ª–µ–Ω–∏—è —Å–ª–∏—Ç–∫–æ–≤
@dp.message(AdminStates.waiting_for_add_coins)
async def process_add_coins(message: types.Message, state: FSMContext):
    if message.text == "/cancel":
        await state.clear()
        await message.answer(f"{INDENT}–ù–∞—á–∏—Å–ª–µ–Ω–∏–µ —Å–ª–∏—Ç–∫–æ–≤ –æ—Ç–º–µ–Ω–µ–Ω–æ.")
        return

    try:
        user_id, coins = map(int, message.text.strip().split(':'))
        cursor.execute("SELECT user_id, balance FROM users WHERE user_id = ?", (user_id,))
        user = cursor.fetchone()

        if not user:
            await message.answer(f"{INDENT}–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Å ID <b>{user_id}</b> –Ω–µ –Ω–∞–π–¥–µ–Ω.")
            return

        cursor.execute("UPDATE users SET balance = balance + ? WHERE user_id = ?", (coins, user_id))
        conn.commit()

        # –£–≤–µ–¥–æ–º–ª—è–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –æ –Ω–∞—á–∏—Å–ª–µ–Ω–∏–∏ —Å–ª–∏—Ç–∫–æ–≤
        try:
            new_balance = user[1] + coins
            await bot.send_message(
                user_id,
                f"{INDENT}üí∞ –í–∞–º –Ω–∞—á–∏—Å–ª–µ–Ω–æ <b>{coins}</b> —Å–ª–∏—Ç–∫–æ–≤ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º!\n"
                f"{INDENT}–í–∞—à –Ω–æ–≤—ã–π –±–∞–ª–∞–Ω—Å: <b>{new_balance}</b> —Å–ª–∏—Ç–∫–æ–≤."
            )
            logger.info(f"Notified user {user_id} about {coins} coins addition")
        except Exception as e:
            logger.error(f"Failed to notify user {user_id} about coins addition: {e}")
            await message.answer(
                f"{INDENT}–ù–µ —É–¥–∞–ª–æ—Å—å —É–≤–µ–¥–æ–º–∏—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è <b>{user_id}</b>. –í–æ–∑–º–æ–∂–Ω–æ, –æ–Ω –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–ª –±–æ—Ç–∞."
            )

        await message.answer(
            f"{INDENT}–ù–∞—á–∏—Å–ª–µ–Ω–æ <b>{coins}</b> —Å–ª–∏—Ç–∫–æ–≤ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é —Å ID <b>{user_id}</b>."
        )
    except ValueError:
        await message.answer(
            f"{INDENT}–û—à–∏–±–∫–∞: –≤–≤–µ–¥–∏—Ç–µ –¥–∞–Ω–Ω—ã–µ –≤ —Ñ–æ—Ä–º–∞—Ç–µ user_id:–∫–æ–ª–∏—á–µ—Å—Ç–≤–æ (–Ω–∞–ø—Ä–∏–º–µ—Ä, 12345:10)."
        )
    except Exception as e:
        logger.error(f"Error adding coins: {e}")
        await message.answer(f"{INDENT}–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –Ω–∞—á–∏—Å–ª–µ–Ω–∏–∏ —Å–ª–∏—Ç–∫–æ–≤: {str(e)}")

    await state.clear()

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ —Ä–∞—Å—Å—ã–ª–∫–∏
@dp.callback_query(F.data == "broadcast")
async def start_broadcast(callback: types.CallbackQuery, state: FSMContext):
    if callback.from_user.id not in ADMIN_IDS:
        await callback.answer("–£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞.", show_alert=True)
        return

    await state.set_state(AdminStates.waiting_for_broadcast)
    await callback.message.answer(
        f"{INDENT}–í–≤–µ–¥–∏—Ç–µ —Ç–µ–∫—Å—Ç –¥–ª—è —Ä–∞—Å—Å—ã–ª–∫–∏ –≤—Å–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º.\n"
        f"{INDENT}–û—Ç–ø—Ä–∞–≤—å—Ç–µ /cancel –¥–ª—è –æ—Ç–º–µ–Ω—ã."
    )

@dp.message(AdminStates.waiting_for_broadcast)
async def process_broadcast(message: types.Message, state: FSMContext):
    if message.text == "/cancel":
        await state.clear()
        await message.answer(f"{INDENT}–†–∞—Å—Å—ã–ª–∫–∞ –æ—Ç–º–µ–Ω–µ–Ω–∞.")
        return

    broadcast_text = message.text.strip()
    if not broadcast_text:
        await message.answer(f"{INDENT}–¢–µ–∫—Å—Ç —Ä–∞—Å—Å—ã–ª–∫–∏ –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å –ø—É—Å—Ç—ã–º.")
        return

    cursor.execute("SELECT user_id FROM users")
    users = cursor.fetchall()

    success = 0
    failed = 0

    for user in users:
        user_id = user[0]
        try:
            await bot.send_message(user_id, f"{INDENT}üì¢ –û–±—ä—è–≤–ª–µ–Ω–∏–µ:\n\n{INDENT}{broadcast_text}")
            success += 1
        except Exception as e:
            logger.error(f"Failed to send broadcast to user {user_id}: {e}")
            failed += 1

    await message.answer(
        f"{INDENT}–†–∞—Å—Å—ã–ª–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞.\n"
        f"{INDENT}–£—Å–ø–µ—à–Ω–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ: <b>{success}</b> –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º.\n"
        f"{INDENT}–ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å: <b>{failed}</b> –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º."
    )
    await state.clear()

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –∫–∞—Ç–µ–≥–æ—Ä–∏—è–º–∏
@dp.callback_query(F.data == "categories")
async def manage_categories(callback: types.CallbackQuery):
    if callback.from_user.id not in ADMIN_IDS:
        await callback.answer("–£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞.", show_alert=True)
        return

    cursor.execute("SELECT name, display_name FROM categories")
    categories = cursor.fetchall()

    text = f"{INDENT}üìù –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –∫–∞—Ç–µ–≥–æ—Ä–∏—è–º–∏:\n\n"
    for idx, category in enumerate(categories, 1):
        name, display_name = category
        text += f"{INDENT}{idx}. {display_name} (—Å–∏—Å—Ç–µ–º–Ω–æ–µ –∏–º—è: {name})\n"

    builder = InlineKeyboardBuilder()
    builder.add(
        InlineKeyboardButton(text="‚ûï –î–æ–±–∞–≤–∏—Ç—å –∫–∞—Ç–µ–≥–æ—Ä–∏—é", callback_data="add_category"),
        InlineKeyboardButton(text="‚ûñ –£–¥–∞–ª–∏—Ç—å –∫–∞—Ç–µ–≥–æ—Ä–∏—é", callback_data="delete_category")
    )
    builder.adjust(2)

    await callback.message.edit_text(text, reply_markup=builder.as_markup())

@dp.callback_query(F.data == "add_category")
async def add_category(callback: types.CallbackQuery, state: FSMContext):
    if callback.from_user.id not in ADMIN_IDS:
        await callback.answer("–£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞.", show_alert=True)
        return

    await state.set_state(AdminStates.waiting_for_category)
    await callback.message.answer(
        f"{INDENT}–í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –Ω–æ–≤–æ–π –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ –≤ —Ñ–æ—Ä–º–∞—Ç–µ:\n"
        f"{INDENT}—Å–∏—Å—Ç–µ–º–Ω–æ–µ_–∏–º—è:–æ—Ç–æ–±—Ä–∞–∂–∞–µ–º–æ–µ_–∏–º—è\n"
        f"{INDENT}–ù–∞–ø—Ä–∏–º–µ—Ä: –ù–æ–≤—ã–µ_–∏–≥—Ä—ã:–ù–æ–≤—ã–µ –∏–≥—Ä—ã\n"
        f"{INDENT}–û—Ç–ø—Ä–∞–≤—å—Ç–µ /cancel –¥–ª—è –æ—Ç–º–µ–Ω—ã."
    )

@dp.message(AdminStates.waiting_for_category)
async def process_add_category(message: types.Message, state: FSMContext):
    if message.text == "/cancel":
        await state.clear()
        await message.answer(f"{INDENT}–î–æ–±–∞–≤–ª–µ–Ω–∏–µ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ –æ—Ç–º–µ–Ω–µ–Ω–æ.")
        return

    try:
        name, display_name = message.text.strip().split(':')
        name = name.strip()
        display_name = display_name.strip()

        cursor.execute("SELECT name FROM categories WHERE name = ?", (name,))
        if cursor.fetchone():
            await message.answer(f"{INDENT}–ö–∞—Ç–µ–≥–æ—Ä–∏—è —Å —Å–∏—Å—Ç–µ–º–Ω—ã–º –∏–º–µ–Ω–µ–º <b>{name}</b> —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç.")
            return

        cursor.execute("INSERT INTO categories (name, display_name) VALUES (?, ?)", (name, display_name))
        conn.commit()
        await message.answer(
            f"{INDENT}–ö–∞—Ç–µ–≥–æ—Ä–∏—è <b>{display_name}</b> (—Å–∏—Å—Ç–µ–º–Ω–æ–µ –∏–º—è: {name}) —É—Å–ø–µ—à–Ω–æ –¥–æ–±–∞–≤–ª–µ–Ω–∞."
        )
    except ValueError:
        await message.answer(
            f"{INDENT}–û—à–∏–±–∫–∞: –≤–≤–µ–¥–∏—Ç–µ –¥–∞–Ω–Ω—ã–µ –≤ —Ñ–æ—Ä–º–∞—Ç–µ —Å–∏—Å—Ç–µ–º–Ω–æ–µ_–∏–º—è:–æ—Ç–æ–±—Ä–∞–∂–∞–µ–º–æ–µ_–∏–º—è."
        )
    except Exception as e:
        logger.error(f"Error adding category: {e}")
        await message.answer(f"{INDENT}–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –¥–æ–±–∞–≤–ª–µ–Ω–∏–∏ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏: {str(e)}")

    await state.clear()

@dp.callback_query(F.data == "delete_category")
async def delete_category(callback: types.CallbackQuery, state: FSMContext):
    if callback.from_user.id not in ADMIN_IDS:
        await callback.answer("–£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞.", show_alert=True)
        return
    cursor.execute("SELECT name, display_name FROM categories")
    categories = cursor.fetchall()

    if not categories:
        await callback.message.answer(f"{INDENT}–ù–µ—Ç –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –∫–∞—Ç–µ–≥–æ—Ä–∏–π –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è.")
        return

    builder = InlineKeyboardBuilder()
    for category in categories:
        builder.add(InlineKeyboardButton(
            text=category[1],
            callback_data=f"confirm_delete_category_{category[0]}"
        ))
    builder.add(InlineKeyboardButton(
        text="‚¨ÖÔ∏è –ù–∞–∑–∞–¥",
        callback_data="categories"
    ))
    builder.adjust(2)

    await callback.message.edit_text(
        f"{INDENT}–í—ã–±–µ—Ä–∏—Ç–µ –∫–∞—Ç–µ–≥–æ—Ä–∏—é –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è:",
        reply_markup=builder.as_markup()
    )

@dp.callback_query(F.data.startswith("confirm_delete_category_"))
async def confirm_delete_category(callback: types.CallbackQuery, state: FSMContext):
        if callback.from_user.id not in ADMIN_IDS:
            await callback.answer("–£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞.", show_alert=True)
            return

        category = callback.data.split("_")[3]

        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ —Ç–æ–≤–∞—Ä—ã –≤ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏
        cursor.execute(
            "SELECT COUNT(*) FROM accounts WHERE category = ? AND claimed_by IS NULL",
            (category,)
        )
        product_count = cursor.fetchone()[0]

        if product_count > 0:
            await callback.message.edit_text(
                f"{INDENT}–ù–µ–ª—å–∑—è —É–¥–∞–ª–∏—Ç—å –∫–∞—Ç–µ–≥–æ—Ä–∏—é <b>{category}</b>, —Ç–∞–∫ –∫–∞–∫ –≤ –Ω–µ–π –µ—Å—Ç—å —Ç–æ–≤–∞—Ä—ã ({product_count}).\n"
                f"{INDENT}–°–Ω–∞—á–∞–ª–∞ —É–¥–∞–ª–∏—Ç–µ –≤—Å–µ —Ç–æ–≤–∞—Ä—ã –∏–∑ —ç—Ç–æ–π –∫–∞—Ç–µ–≥–æ—Ä–∏–∏."
            )
            return

        try:
            cursor.execute("DELETE FROM categories WHERE name = ?", (category,))
            conn.commit()
            logger.info(f"Category {category} deleted successfully")
            await callback.message.edit_text(
                f"{INDENT}–ö–∞—Ç–µ–≥–æ—Ä–∏—è <b>{category}</b> —É—Å–ø–µ—à–Ω–æ —É–¥–∞–ª–µ–Ω–∞."
            )
        except Exception as e:
            logger.error(f"Error deleting category {category}: {e}")
            await callback.message.edit_text(
                f"{INDENT}–û—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏: {str(e)}"
            )

async def on_startup():
    logger.info("Bot is starting...")
    try:
        await bot.delete_webhook(drop_pending_updates=True)
        logger.info("Webhook deleted successfully")
    except Exception as e:
        logger.error(f"Error deleting webhook: {e}")

async def on_shutdown():
    logger.info("Bot is shutting down...")
    try:
        conn.close()
        logger.info("Database connection closed")
    except Exception as e:
        logger.error(f"Error closing database connection: {e}")
    await bot.session.close()
    logger.info("Bot session closed")

if __name__ == "__main__":
    import asyncio
    try:
        dp.startup.register(on_startup)
        dp.shutdown.register(on_shutdown)
        asyncio.run(dp.start_polling(bot))
    except Exception as e:
        logger.error(f"Error running bot: {e}")
        raise
